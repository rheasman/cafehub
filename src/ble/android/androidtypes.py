from typing import Any, Generic, List, Optional, Protocol, TypeVar
from xmlrpc.client import boolean

"""
    NOTE: THIS ENTIRE FILE IS JUST TO KEEP THE TYPECHECKER HAPPY

    This file adds types so that PyLance is happy with the Android gatt client implementation.

    This should make it easier for the unfamiliar to edit this code, because the typechecker will tell them
    if they're making a mistake.

    None of this code is executed. It just hints to the checker what types the Android Java classes are expecting
"""

T = TypeVar('T')

class T_PythonJavaClass(Protocol): ...

class T_Logger(Protocol):
    def debug(self, s: str) -> None: ...


class T_JNIUS_Initable(Protocol):
    def __call__(self : T, *args: Any, **kwds: Any) -> T: ...

class T_JavaObject(T_JNIUS_Initable, Protocol):
    def getClass(self) -> 'T_JavaObject': ...

class T_CharSequence(T_JavaObject, Protocol): ...

class T_BluetoothGattDescriptor(T_JavaObject, Protocol):
    ENABLE_NOTIFICATION_VALUE : bytes
    DISABLE_NOTIFICATION_VALUE : bytes
    def setValue(self, data: bytes) -> None: ...

class T_JavaListOf(Protocol, Generic[T]):
    def toArray(self) -> List[T]: ...

class T_Java_String(T_CharSequence, Protocol):
    ...

class T_ArrayList(T_JavaObject, T_JavaListOf[T], Protocol):
    def add(self, element : T) -> bool: ...

class T_Uri(T_JavaObject, Protocol):
    @staticmethod
    def parse(s : str) -> 'T_Uri': ...

class T_Java_UUID(T_JavaObject, Protocol):
    def toString(self) -> str: ...
    def fromString(self, s: str) -> 'T_Java_UUID': ...

class T_ScanRecord(T_JavaObject, Protocol):
    def getDeviceName(self) -> str:
        ...        
    def getServiceUuids(self) -> Optional[T_JavaListOf[T_Java_UUID]]: ...

class T_ScanResult(T_JavaObject, Protocol):
    device : 'T_BluetoothDevice'
    def getDevice(self) -> 'T_BluetoothDevice': ...    
    def getScanRecord(self) -> T_ScanRecord: ...

class T_ScanCallback(T_JavaObject, Protocol):
    def onBatchScanResults(self, results: T_JavaListOf[T_ScanResult]) -> None: ...    
    def onScanFailed(self, errorCode: int) -> None: ...    
    def onScanResult(self, callbackType: int, result: T_ScanResult) -> None: ...

class T_ScanCallbackImpl(T_ScanCallback, Protocol):
    def __call__(self, *args: Any, **kwds: Any) -> 'T_ScanCallbackImpl': ...
    def setImpl(self, impl: T_PythonJavaClass) -> None: ...

class T_BluetoothLeScanner(T_JavaObject, Protocol):
    def startScan(self, scancb : T_ScanCallback) -> None: ...    
    def stopScan(self, scancb : T_ScanCallback) -> None: ...

class T_BluetoothGattCharacteristic(T_JavaObject, Protocol):
    WRITE_TYPE_NO_RESPONSE : int
    WRITE_TYPE_DEFAULT : int
    def getUuid(self) -> T_Java_UUID: ...
    def setValue(self, data: bytes) -> None: ...
    def setWriteType(self, type: int) -> None: ...
    def getDescriptor(self, uuid: T_Java_UUID) -> T_BluetoothGattDescriptor: ...

class T_BluetoothClassicAdapter(T_JavaObject, Protocol):
    def cancelDiscovery(self): ...
    def isEnabled(self) -> bool: ...

class T_ComponentName(T_JavaObject, Protocol): ...

class T_Intent(T_JavaObject, Protocol):
    def __call__(self, *args: Any, **kwds: Any) -> 'T_Intent': ...
    def setAction(self, s : str)->None: ...
    def setData(self, d : T_Uri) -> None: ...

class T_Context(T_JavaObject, Protocol):
    POWER_SERVICE : T_Java_String
    NOTIFICATION_SERVICE : T_Java_String
    
    def startForegroundService(self, intent: T_Intent, argument : str = ...) -> T_ComponentName: ...
    def getPackageName(self) -> str: ...
    def getSystemService(self, s : T_Java_String) -> Any: ... 
    def checkSelfPermission(self, permission : str) -> int: ...


class T_BluetoothGattService(T_JavaObject, Protocol):
    def getUuid(self) -> T_Java_UUID: ...
    def getCharacteristics(self) -> T_JavaListOf[T_BluetoothGattCharacteristic]: ...

class T_BluetoothGatt(T_JavaObject, Protocol):
    def discoverServices(self) -> boolean: ...
    def connect(self) -> None: ...
    def disconnect(self) -> None: ...
    def close(self) -> None: ...
    def setCharacteristicNotification(self, char: Any, enable : bool) -> bool: ...
    def getServices(self) -> T_JavaListOf[T_BluetoothGattService]: ...
    def readCharacteristic(self, char : T_BluetoothGattCharacteristic) -> bool: ...
    def writeCharacteristic(self, char: T_BluetoothGattCharacteristic) -> bool: ...
    def writeDescriptor(self, desc: T_BluetoothGattDescriptor) -> bool: ...
    def getName(self) -> str: ...

class T_BluetoothGattCallbackImpl(T_JavaObject, Protocol):
    def __call__(self, *args: Any, **kwds: Any) -> 'T_BluetoothGattCallbackImpl': ...    
    def setImpl(self, impl : T_PythonJavaClass) -> None: ...

class T_BluetoothDevice(T_JavaObject, Protocol):
    def getAddress(self) -> str: ...
    def connectGatt(self, context : T_Context, autoconnect: bool, cbimpl : T_BluetoothGattCallbackImpl) -> T_BluetoothGatt: ...

class T_BluetoothAdapter(T_BluetoothClassicAdapter, Protocol):
    ACTION_REQUEST_ENABLE : str
    def getDefaultAdapter(self) -> 'T_BluetoothAdapter': ...
    def getRemoteDevice(self, mac : List[int]) -> T_BluetoothDevice: ...
    def getBluetoothLeScanner(self) -> T_BluetoothLeScanner: ...

class T_PendingIntent(T_JavaObject, Protocol):
    @staticmethod
    def getActivity(context : T_Context, requestCode : int, intent : T_Intent, flags : int) -> 'T_PendingIntent': ...

class T_Drawable(T_JavaObject, Protocol):
    presplash: 'T_Drawable'

class T_Notification(Protocol): ...

class T_NotificationBuilder(T_JavaObject, Protocol):
    def setContentTitle(self : T, title : T_CharSequence) -> T: ...
    def setContentText(self : T, text : T_CharSequence) -> T: ...
    def setSmallIcon(self: T, icon: T_Drawable) -> T: ...
    def setContentIntent(self: T, intent : T_PendingIntent) -> T: ...
    def getNotification(self) -> T_Notification: ...

class T_NotificationAction(T_JavaObject, Protocol): ...

class T_NotificationChannel(T_JavaObject, Protocol):
    def setDescription(self, description : T_Java_String) -> None: ...

class T_NotificationManager(T_JavaObject, Protocol):
    def createNotificationChannel(self, chan : T_NotificationChannel) -> None: ...
    def cancelAll(self) -> None: ...
    def deleteNotificationChannel(self, name : T_Java_String) -> None: ...
    
class T_PowerManager(T_JavaObject, Protocol):
    PARTIAL_WAKE_LOCK : int
    class WakeLock(T_JavaObject, Protocol):
        def acquire(self) -> None: ...
        def release(self) -> None: ...

    def newWakeLock(self, level : int, tag : str) -> WakeLock: ...
    def isIgnoringBatteryOptimizations(self, s : str) -> bool : ...

class T_BuildVersion(T_JavaObject, Protocol):
    SDK_INT : int

class T_Settings(T_JavaObject, Protocol):
    ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS : str

class T_Activity(T_Context, Protocol):
    def startActivityForResult(self, intent : T_Intent, result : int, options : Any = None) -> None: ...
    def startActivity(self, intent : T_Intent) -> None: ...
    def requestPermissions(self, permissions : T_JavaListOf[T_Java_String], id : int) -> None: ...

class T_PythonActivity(T_JavaObject, Protocol):
    mActivity : T_Activity

class T_Native_Invocation_Handler(T_JavaObject, Protocol): ...

class T_Service(T_Context, Protocol):
    def startForeground(self, id : int, notification : T_Notification) -> None: ...
    def stopSelf(self) -> None: ...

class T_PythonService(T_Service, Protocol):
    mService : 'T_PythonService'
    def setAutoRestartService(self, b : bool) -> None: ...
    def startType(self) -> int: ...

class T_BLEService(T_PythonService, Protocol):
    def start(self, s : T_Context, arg: str) -> None: ...

